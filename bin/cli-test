#!/usr/bin/env bb

(require '[lambdaisland.cli :as cli]
         '[clojure.pprint :refer [pprint]])

(defn list-widgets
  "List widgets

  Print a complete list of widgets."
  [opts]
  (pprint opts))

(defn add-widget
  "Add a widget

  Add a widget with the given attributes."
  [opts]
  (pprint opts))

(defn auth-login
  "Login with your account"
  [opts]
  (pprint opts))

(defn auth-logout
  "Log out of your account"
  [opts]
  (pprint opts))

(defn cli-test
  "Ground breaking tool breaks new ground."
  [flags]
  (pprint flags))

#_
(cli/dispatch
 {:command #'cli-test
  :flags
  ["--prod" {:doc "Use the production environment"
             :handler (fn [opts] (assoc opts :env :prod))}
   "--input FILE" {:doc "Use the staging environment"
                   :handler (fn [opts file] (assoc opts :input-file file))}]})

(cli/dispatch
 {:commands
  ["ls" {:command #'list-widgets
         :flags
         ["--port PORT" {:doc  "Port number"
                         :default 8080}
          "-l, --long"
          {:doc        "Use long format"
           }]}]
  :flags
  ["-s, --silent" "Shut up"]})
#_
(cli/dispatch
 {:name    "cli-test"
  :doc     "This is my cool CLI tool. Use it well."
  :strict? true
  :commands
  ["ls"       #'list-widgets
   "add <id>" #'add-widget
   "auth" {:doc      "Auth commands"
           :commands ["login"  #'auth-login
                      "logout" #'auth-logout]}]
  :flags
  ["-v,--verbose" "Increase verbosity"
   "--input=<foo>" "Input file"]})

;; (require '[lambdaisland.cli :as cli]
;;          '[clojure.pprint :as pprint])


;; (cli/dispatch #'cli-test)
